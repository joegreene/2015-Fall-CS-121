/*
  EXAMPLE OF PUTTING ALL OF CLASS DEFINITION IN ONE HEADER FILE
  
  (This file only holds the definition of the class)
*/
#include <iostream>

using namespace std;

// required for volume and area methods
const double PI = 3.141592;

class FCylinder
{
  private:
    // member variables
    double radius, height;              // doubles for radius & height

  public:
    FCylinder();                        // default constructor
    FCylinder(double r, double h);      // overloaded constructor
    FCylinder(const FCylinder& fc);     // copy constructor; optional as C++
                                        // defines this automatically (I added
                                        // this solely to show how it looks)
    ~FCylinder();                       // deconstructor

    // getter Methods
    double getRadius();                 // return radius
    double getHeight();                 // return height (TO-DO)
    
    // setter Methods
    void setRadius(double r);           //set radius (with bounds-checking)
    void setHeight(double h);           //set height (with bounds-checking)
    
    // misc. Methods
    double computeSurfaceArea();        // returns surface area of FCylinder

    double computeVolume();             // returns volume of FCylinder

    void printSelf();                   // print member variables of FCylinder
};

/*
  
*/

// default constructor
FCylinder::FCylinder()
{
  // default initialization
  radius = height = 1;
}

// overloaded constructor
FCylinder::FCylinder(double r, double h)
{
  // first assign default value
  radius = height = 1;

  // afterwards, attempt to assign the values of r, h to radius, height
  setRadius(r);
  setHeight(h);

  // NOTE: If setRadius does not work, then radius is the default value of 1. 
  //       If setHeight does not work, then height is the default value of 1.
}

// copy constructor; I included this to show what a copy constructor does
FCylinder::FCylinder(const FCylinder& fc)
{
  // we're allowed to use the dot operator here because we're within 
  // the "same" class

  radius = fc.radius;
  height = fc.height;
}

// deconstructor
FCylinder::~FCylinder()
{
  cout << "Destroyed a FCylinder.\n";
}

//---------------------Getter Methods---------------------//
// returns radius
double FCylinder::getRadius()
{
  return radius;
}

// returns height (TO-DO)
double FCylinder::getHeight()
{
  return radius;
}

//---------------------Setter Methods---------------------//
// set radius (as long as r > 0, else keep original)
void FCylinder::setRadius(double r)
{
  if(r > 0)
  {
    radius = r;
  }
  else
  {
    cout << "Attempted to assign invalid radius size! Retaining current radius value.\n";
  }
}

// set height (as long as h > 0, else keep original)
void FCylinder::setHeight(double h)
{
  if(h > 0)
  {
    height = h;
  }
  else
  {
    cout << "Attempted to assign invalid height size! Retaining current height value.\n";
  }
}
    
//----------------------Misc. Methods---------------------//
// returns surface area of FCylinder
double FCylinder::computeSurfaceArea()
{
  return (2 * PI * radius * height) + (2 * PI * radius * radius);
}
// returns volume of FCylinder (TO-DO)
double FCylinder::computeVolume()
{
  // volume = pi * r^2 * h = pi * r * r * h
  return PI * radius * radius * height;
}

// prints member variables of FCylinder class to console output (TO-DO)
void FCylinder::printSelf()
{
  cout << "Radius: " << radius << endl;
  cout << "Height: " << height << endl;
}
